// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  email         String   @unique
  mobile_number String?
  image_url     String?
  first_name    String?
  last_name     String?
  street        String?
  barangay      String?
  city          String?
  province      String?
  role          Role     @default(CUSTOMER)
  orders        Order[]
}

enum Role {
  CUSTOMER
  ADMIN
}

model Drink {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  base_price Float
  name       String
  color      Colors?
}

model Milk {
  id               String   @id @default(uuid())
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  name             String
  color            Colors
  additional_price Float?
}

model Size {
  id               String   @id @default(uuid())
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  name             Sizes    @unique @default(ML_300)
  additional_price Float?
}

model Order {
  id                 String         @id @default(uuid())
  ref                String
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  completed_at       DateTime?
  is_paid            Boolean        @default(false)
  status             Statuses       @default(TO_CONFIRM)
  total_price        Float
  total_items        Int
  customer_name      String?
  delivery_address   String
  landmark           String?
  claim_method       ClaimMethods   @default(DELIVERY)
  payment_method     PaymentMethods @default(GCASH)
  logged_in_customer User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id            String?
  items              OrderItem[]

  @@index([user_id])
}

model OrderItem {
  id                    String  @id @default(uuid())
  order                 Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id              String
  name                  String
  price                 Float
  quantity              Int
  size_name             String
  size_additional_price Float?
  milk_name             String?
  milk_additional_price Float?
  custom_request        String?

  @@index([order_id])
}

enum Statuses {
  TO_CONFIRM
  WAITING_FOR_PAYMENT
  PREPARING
  TO_DELIVER
  DELIVERED
}

enum Sizes {
  ML_300
  ML_400
}

enum Colors {
  DARK
  LIGHT
  BEIGE
  SWEET
  DARK_BROWN
  LIGHT_BROWN
  ORANGE
  GREEN
  CARAMEL
}

enum ClaimMethods {
  DELIVERY
  // PICK_UP
}

enum PaymentMethods {
  GCASH
  BANK_TRANSFER
  // COD
}
